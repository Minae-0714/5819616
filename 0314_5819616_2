for 루프: num 변수가 2에서 시작하여 100까지 증가합니다.
각 num 값에 대해 소수 여부를 확인합니다.

isPrime 변수: isPrime 변수는 현재 num 값이 소수인지를 나타냅니다. 1은 소수, 0은 소수가 아님을 나타냅니다.

내부 for 루프: i 변수가 2부터 시작하여 num의 제곱근까지 증가합니다. (i * i <= num)
만약 num이 i로 나누어떨어진다면, 즉, num % i == 0이라면 isPrime을 0으로 설정하고, 내부 루프를 멈춥니다. 왜냐하면 소수는 1과 자기 자신만을 약수로 가지기 때문입니다.

if 문: 내부 루프를 빠져나온 후, 만약 isPrime이 1(즉, 소수)이면, sum 변수에 현재의 num 값을 더합니다.

빅오계산 :  외부 for 루프는 각 숫자에 대해 한 번씩 실행되며, 내부 루프는 각 숫자의 제곱근까지만 검사합니다. 따라서, 총 실행 시간은 각 숫자에 대해 최대 √n번의 검사가 이루어집니다. 즉, 모든 숫자에 대해 √n번씩 검사하므로, 전체 시간 복잡도는 O(n√n)입니다.

O(n√n)
